rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // リクエストしているユーザーが認証済みであること
    function isAuthenticated() {
      return request.auth != null
      ;
    }

    // リクエストしているユーザーが認証済みかつドキュメントを作った本人であること
    function isDocumentAuthor(userId) {
      return isAuthenticated()
        && userId == request.auth.uid
      ;
    }

    // リクエストしているユーザーが認証済みかつグループのメンバーであること
    function isGroupMember(userId, groupId) {
      return isAuthenticated()
        && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(userId))
      ;
    }

    // ユーザーデータのスキーマ検証
    function isValidUserData(userData) {
      return userData.size() == 3
        && 'name' in userData && userData.name is string
        && 'imageURL' in userData && userData.imageURL is string
        && 'createdAt' in userData && userData.createdAt is timestamp
      ;
    }

    // グループデータのスキーマ検証
    function isValidGroupData(groupData) {
      return groupData.size() == 3
        && 'name' in groupData && groupData.name is string
        && 'imageURL' in groupData && groupData.imageURL is string
        && 'createdAt' in groupData && groupData.createdAt is timestamp
      ;
    }

    // イベントデータのスキーマ検証
    function isValidEventData(eventData) {
      return eventData.size() == 11
        && 'ownerId' in eventData && eventData.ownerId is string
        && 'title' in eventData && eventData.title is string
        && 'place' in eventData && eventData.place is string
        && 'memo' in eventData && eventData.memo is string
        && 'isAllDay' in eventData && eventData.isAllDay is bool
        && 'monthList' in eventData && eventData.monthList is list
        && 'dateList' in eventData && eventData.dateList is list
        && 'start' in eventData && eventData.start is timestamp
        && 'end' in eventData && eventData.end is timestamp
        && 'createdAt' in eventData && eventData.createdAt is timestamp
        && 'updatedAt' in eventData && eventData.updatedAt is timestamp
      ;
    }

    // タスクデータのスキーマ検証
    function isValidTaskData(taskData) {
      return taskData.size() == 9
        && 'ownerId' in taskData && taskData.ownerId is string
        && 'title' in taskData && taskData.title is string
        && 'memo' in taskData && taskData.memo is string
        && 'isCompleted' in taskData && taskData.isCompleted is bool
        && 'isDecidedDueDate' in taskData && taskData.isDecidedDueDate is bool
        && 'dueDate' in taskData && (taskData.dueDate is timestamp || taskData.dueDate == null)
        && 'assignedMembersId' in taskData && taskData.assignedMembersId is list
        && 'createdAt' in taskData && taskData.createdAt is timestamp
        && 'updatedAt' in taskData && taskData.updatedAt is timestamp
      ;
    }

    // ユーザーが参加しているグループデータのスキーマ検証
    function isValidJoiningGroupData(joiningGroupData) {
      return joiningGroupData.size() == 3
        && 'name' in joiningGroupData && joiningGroupData.name is string
        && 'imageURL' in joiningGroupData && joiningGroupData.imageURL is string
        && 'joinedAt' in joiningGroupData && joiningGroupData.joinedAt is timestamp
      ;
    }

    // 曲データのスキーマ検証
    function isValidSongData(songData) {
      return songData.size() == 5
        && 'title' in songData && songData.title is string
        && 'minute' in songData && songData.minute is int
        && 'memo' in songData && songData.memo is string
        && 'createdAt' in songData && songData.createdAt is timestamp
        && 'updatedAt' in songData && songData.updatedAt is timestamp
      ;
    }

    // グループに参加しているユーザーデータのスキーマ検証
    function isValidMemberData(memberData) {
      return memberData.size() == 3
        && 'name' in memberData && memberData.name is string
        && 'imageURL' in memberData && memberData.imageURL is string
        && 'joinedAt' in memberData && memberData.joinedAt is timestamp
      ;
    }

    // 問い合わせデータのスキーマ検証
    function isValidInquiryData(inquiryData) {
      return inquiryData.size() == 3
        && 'userId' in inquiryData && inquiryData.userId is string
        && 'content' in inquiryData && inquiryData.content is string
        && 'createdAt' in inquiryData && inquiryData.createdAt is timestamp
      ;
    }

    // /users
    match /users/{userId} {
      allow get: if isDocumentAuthor(userId)
      ;
      allow create: if isDocumentAuthor(userId)
        && isValidUserData(request.resource.data)
        && request.resource.data.name.size() > 0
        && request.resource.data.imageURL == ''
        && request.resource.data.createdAt == request.time
      ;
      allow update: if isDocumentAuthor(userId)
        && isValidUserData(request.resource.data)
        && request.resource.data.name.size() > 0
        && request.resource.data.createdAt == resource.data.createdAt
      ;
      allow delete: if isDocumentAuthor(userId)
      ;

      // /users/{userId}/events
      match /events/{eventId} {
      	allow get: if isDocumentAuthor(userId)
        ;
        allow create: if isDocumentAuthor(userId)
          && isValidEventData(request.resource.data)
          && request.resource.data.ownerId == userId
          && request.resource.data.title.size() > 0
          && request.resource.data.monthList.size() > 0
          && request.resource.data.dateList.size() > 0
          && request.resource.data.createdAt == request.time
          && request.resource.data.updatedAt == request.time
        ;
        allow update: if isDocumentAuthor(userId)
          && isValidEventData(request.resource.data)
          && request.resource.data.ownerId == resource.data.ownerId
          && request.resource.data.title.size() > 0
          && request.resource.data.monthList.size() > 0
          && request.resource.data.dateList.size() > 0
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.updatedAt == request.time
        ;
        allow delete: if isDocumentAuthor(userId)
        ;
      }

      // users/{userId}/tasks
      match /tasks/{taskId} {
        allow get: if isDocumentAuthor(userId)
        ;
        allow create: if isDocumentAuthor(userId)
          && isValidTaskData(request.resource.data)
          && request.resource.data.ownerId == userId
          && request.resource.data.title.size() > 0
          && request.resource.data.assignedMembersId.size() == 1
          && request.resource.data.assignedMembersId.hasOnly([userId])
          && request.resource.data.isCompleted == false
          && request.resource.data.createdAt == request.time
          && request.resource.data.updatedAt == request.time
        ;
        allow update: if isDocumentAuthor(userId)
          && isValidTaskData(request.resource.data)
          && request.resource.data.ownerId == resource.data.ownerId
          && request.resource.data.title.size() > 0
          && request.resource.data.assignedMembersId == resource.data.assignedMembersId
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.updatedAt == request.time
        ;
        allow delete: if isDocumentAuthor(userId)
        ;
      }

      // /users/{userId}/joiningGroups
      match /joiningGroups/{groupId} {
        allow read: if isDocumentAuthor(userId)
        ;
        allow create: if isDocumentAuthor(userId)
          && isValidJoiningGroupData(request.resource.data)
          && request.resource.data.name.size() > 0
          && request.resource.data.joinedAt == request.time
        ;
        allow update: if isGroupMember(request.auth.uid, groupId)
          && isValidJoiningGroupData(request.resource.data)
          && request.resource.data.name.size() > 0
          && request.resource.data.joinedAt == resource.data.joinedAt
        ;
        allow delete: if isGroupMember(request.auth.uid, groupId)
        ;
      }
    }

    // /groups
    match /groups/{groupId} {
      allow get: if isGroupMember(request.auth.uid, groupId)
      ;
      allow create: if isAuthenticated()
        && isValidGroupData(request.resource.data)
        && request.resource.data.name.size() > 0
        && request.resource.data.imageURL == ''
        && request.resource.data.createdAt == request.time
      ;
      allow update: if isGroupMember(request.auth.uid, groupId)
        && isValidGroupData(request.resource.data)
        && request.resource.data.name.size() > 0
        && request.resource.data.createdAt == resource.data.createdAt
      ;
      allow delete: if isGroupMember(request.auth.uid, groupId)
      ;

      // /groups/{groupId}/events
      match /events/{eventId} {
        allow get: if isGroupMember(request.auth.uid, groupId)
        ;
        allow create: if isGroupMember(request.auth.uid, groupId)
          && isValidEventData(request.resource.data)
          && request.resource.data.ownerId == groupId
          && request.resource.data.title.size() > 0
          && request.resource.data.monthList.size() > 0
          && request.resource.data.dateList.size() > 0
          && request.resource.data.createdAt == request.time
          && request.resource.data.updatedAt == request.time
        ;
        allow update: if isGroupMember(request.auth.uid, groupId)
          && isValidEventData(request.resource.data)
          && request.resource.data.ownerId == resource.data.ownerId
          && request.resource.data.title.size() > 0
          && request.resource.data.monthList.size() > 0
          && request.resource.data.dateList.size() > 0
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.updatedAt == request.time
        ;
        allow delete: if isGroupMember(request.auth.uid, groupId)
        ;
      }

      // groups/{groupId}/tasks
      match /tasks/{taskId} {
        allow get: if isGroupMember(request.auth.uid, groupId)
        ;
        allow create: if isGroupMember(request.auth.uid, groupId)
          && isValidTaskData(request.resource.data)
          && request.resource.data.ownerId == groupId
          && request.resource.data.title.size() > 0
          && request.resource.data.isCompleted == false
          && request.resource.data.createdAt == request.time
          && request.resource.data.updatedAt == request.time
        ;
        allow update: if isGroupMember(request.auth.uid, groupId)
          && isValidTaskData(request.resource.data)
          && request.resource.data.ownerId == resource.data.ownerId
          && request.resource.data.title.size() > 0
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.updatedAt == request.time
        ;
        allow delete: if isGroupMember(request.auth.uid, groupId)
        ;
      }

      // /groups/{groupId}/songs
      match /songs/{songId} {
        allow read: if isGroupMember(request.auth.uid, groupId)
        ;
        allow create: if isGroupMember(request.auth.uid, groupId)
          && isValidSongData(request.resource.data)
          && request.resource.data.title.size() > 0
          && request.resource.data.minute >= 0
          && request.resource.data.createdAt == request.time
          && request.resource.data.updatedAt == request.time
        ;
        allow update: if isGroupMember(request.auth.uid, groupId)
          && isValidSongData(request.resource.data)
          && request.resource.data.title.size() > 0
          && request.resource.data.minute >= 0
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.updatedAt == request.time
        ;
        allow delete: if isGroupMember(request.auth.uid, groupId)
        ;
      }

      // /groups/{groupId}/members
      match /members/{userId} {
        allow read: if isGroupMember(request.auth.uid, groupId)
        ;
        allow create: if isDocumentAuthor(userId)
          && isValidMemberData(request.resource.data)
          && request.resource.data.name.size() > 0
          && request.resource.data.joinedAt == request.time
        ;
        allow update: if isDocumentAuthor(userId)
          && isValidMemberData(request.resource.data)
          && request.resource.data.name.size() > 0
          && request.resource.data.joinedAt == resource.data.joinedAt
        ;
        allow delete: if isGroupMember(request.auth.uid, groupId)
        ;
      }
    }

    // /inquiries
    match /inquiries/{inquiryId} {
      allow create: if isAuthenticated()
        && isValidInquiryData(request.resource.data)
        && request.resource.data.content.size() > 0
        && request.resource.data.createdAt == request.time
      ;
    }

    // /{path=**}
    match /{path=**}/events/{event} {
      allow list: if isAuthenticated()
      ;
    }
    match /{path=**}/tasks/{task} {
      allow list: if isAuthenticated()
      ;
    }
  }
}
